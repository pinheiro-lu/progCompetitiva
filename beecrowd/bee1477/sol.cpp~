#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int N = 1e5;

int n, m;
int p[N][3];

// vector<int> p: array to build the segment tree (0-indexed)
// vector<int> st: segment tree (1-indexed)
// query: O(log n)
// update: O(log n)
// build: O(n)
struct SegTree {
	int st[4*N][3];
	int lazy[4*N];
	int* (*comp)(int*, int*);
	void build(int i, int l, int r) {
		if (l == r) memcpy(st[i], p[l], sizeof p[l]);
		else {
			int m = (l + r) / 2;
			build(2*i, l, m);
			build(2*i+1, m+1, r);
			memcpy(st[i], comp(st[2*i], st[2*i+1]), sizeof st[i]);
		}
	}

	SegTree(int* (*comp)(int*, int*)) : comp(comp) {
		memset(lazy, 0, sizeof lazy);
		build(1, 0, n-1);
	}

	void op(int* s, int times) {
		int aux[3];
		for (int i = 0; i < 3; ++i) aux[i] = s[i];
		for (int i = 0; i < 3; ++i) {
			s[(i + times) % 3] = aux[i];
		}
		
	}

	void propagate(int i, int l, int r) {
		if (l != r) {
			lazy[2*i] += lazy[i];
			lazy[2*i+1] += lazy[i];
		}
		op(st[i], lazy[i]);
		lazy[i] = 0;
	}

	int* query(int i, int l, int r, int a, int b) {
		propagate(i, l, r);
		if (l > b || a > r) {
			static *int c;
			c = new int[3];
			return c;
		}
		if (l >= a && b >= r) {
			cerr << "i " << i << " l " << l << " r " << r << " st[i] " << st[i][0] << ' ' << st[i][1] << ' ' << st[i][2] << '\n';
			return st[i];
		}
		int m = (l + r) / 2;
		int* a1 = query(2*i, l, m, a, b);
		int* a2 = query(2*i+1, m+1, r, a, b);
		int* ret = comp(query(2*i, l, m, a, b), query(2*i+1, m+1, r, a, b));
		cerr << "i " << i << " l " << l << " r " << r << " ret " << ret[0] << ' ' << ret[1] << ' ' << ret[2] << '\n';
		cerr << "a1 " << a1[0] << ' ' << a1[1] << ' ' << a1[2] << '\n';
		cerr << "a2 " << a2[0] << ' ' << a2[1] << ' ' << a2[2] << '\n';
		return ret;
	}

	void upd_range(int i, int l, int r, int a, int b) {
		propagate(i, l, r);
		if (l > b || a > r) return;
		if (l >= a && b >= r) {
			++lazy[i];
			if (l != r) {
				lazy[2*i] += lazy[i];
				lazy[2*i+1] += lazy[i];
			}
			op(st[i], lazy[i]);
			lazy[i] = 0;
			return;
		}
		int m = (l + r) / 2;
		upd_range(i*2, l, m, a, b);
		upd_range(i*2+1, m+1, r, a, b);
		memcpy(st[i], comp(st[2*i], st[2*i+1]), sizeof st[i]);
	}

};

signed main() {
	ios_base::sync_with_stdio(0); cin.tie(0);

	while (cin >> n >> m) {
		memset(p, 0, sizeof p);
		for (int i = 0; i < n; ++i) {
			p[i][0] = 1;
		}
		SegTree st([](int* a, int* b) {
				static int *c;
				c = new int[3];
				for (int i = 0; i < 3; ++i) {
				c[i] = a[i] + b[i];
				}
				return c;
				});
		for (int i = 0; i < m; ++i) {
			char c;
			int a, b;
			cin >> c >> a >> b;
			--a, --b;
			if (c == 'M') {
				st.upd_range(1, 0, n-1, a, b);
			}
			if (c == 'C') {
				int *ans= st.query(1, 0, n-1, a, b);
				cout << ans[0] << ' ' << ans[1] << ' ' << ans[2] << '\n';
			}
		}
		cout << '\n';
	}
	return 0;
}
